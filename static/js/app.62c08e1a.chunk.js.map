{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Pressable","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.62c08e1a.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n  ScrollView,\n  Pressable,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={\n          working ? \"What do you have to do?\" : \"Where do you want to go?\"\n        }\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <Pressable onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={18} color={theme.grey} />\n              </Pressable>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n});\n"],"sourceRoot":""}